[tox]
envlist =
    coverage-erase
    py{3.14, 3.13, 3.12, 3.11, 3.10}
    coverage-report
    build
    mypy-py{3.14, 3.13, 3.12, 3.11, 3.10}
    docs
labels =
    update=update-{requirements, pre-commit, headers}
    prep-release=prep-release

[testenv]
package = wheel
wheel_build_env = build_wheel
depends =
    py{3.14, 3.13, 3.12, 3.11, 3.10}: coverage-erase
deps = -r requirements/test/requirements.txt
commands = coverage run -m pytest {posargs}

[testenv:coverage-erase]
deps = -r requirements/test/requirements-coverage.txt
skip_install = true
commands =
    coverage erase

[testenv:coverage-report{,-ci}]
depends = py{3.14, 3.13, 3.12, 3.11, 3.10}
deps = -r requirements/test/requirements-coverage.txt
skip_install = true
commands_pre =
    - coverage combine
commands =
    coverage report
commands_post =
    !ci: coverage html --fail-under=0

[testenv:build]
base_python = py3.13
skip_install = true
deps =
    build
    twine
    uv
commands =
    python -m build --installer uv --outdir dist/
    twine check --strict dist/*

[testenv:mypy-py{3.14, 3.13, 3.12, 3.11, 3.10}]
deps = -rrequirements/mypy/requirements.txt
setenv =
    MYPY_FORCE_COLOR=1
commands = mypy {posargs}

[testenv:docs]
base_python = py3.13
skip_install = true
deps = -rrequirements/docs/requirements.txt
commands =
    sphinx-build -aWEnqb html docs/ build/docs

[testenv:update_base]
base_python = py3.13
recreate = true
skip_install = true

[testenv:update-headers]
base = update_base
description = Update headers
deps =
    chipshot
commands =
    chipshot --update assets/ docs/ src/ tests/ requirements/README.rst CHANGELOG.rst README.rst

[testenv:update-pre-commit]
base = update_base
description = Update pre-commit hooks
deps =
    pre-commit
    upadup
commands =
    pre-commit autoupdate
    upadup

[testenv:update-requirements]
base = update_base
description = Update requirements files
deps =
    poetry
    poetry-plugin-export
commands =
    poetry update --directory="requirements/docs" --lock
    poetry export --directory="requirements/docs" --output="requirements.txt" --without-hashes
    poetry update --directory="requirements/mypy" --lock
    poetry export --directory="requirements/mypy" --output="requirements.txt" --without-hashes
    poetry update --directory="requirements/test" --lock
    poetry export --directory="requirements/test" --output="requirements.txt" --without-hashes
    poetry export --directory="requirements/test" --output="requirements-coverage.txt" --without-hashes --only="coverage"

[testenv:prep-release]
description = Make the changes needed to create a new release PR
skip_install = true
deps =
    poetry
    scriv
passenv =
    VERSION
commands =
    poetry version "{env:VERSION}"
    scriv collect
